<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\HC32F460_Alios_Example.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\HC32F460_Alios_Example.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Mon Sep 16 15:45:17 2019
<BR><P>
<H3>Maximum Stack Usage =        256 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; krhino_init &rArr; ktimer_init &rArr; krhino_task_create &rArr; task_create &rArr; ready_list_add_tail &rArr; ready_list_init
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[d8]">cpu_intrpt_save</a>
 <LI><a href="#[d9]">cpu_intrpt_restore</a>
 <LI><a href="#[e1]">cpu_task_switch</a>
 <LI><a href="#[11e]">cpu_intrpt_switch</a>
 <LI><a href="#[12d]">cpu_first_task_start</a>
 <LI><a href="#[16]">PendSV_Handler</a>
 <LI><a href="#[ba]">_first_task_restore</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[9d]">IRQ133_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9d]">IRQ133_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[12]">BusFault_Handler</a> from hc32f46x_interrupts.o(i.BusFault_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[15]">DebugMon_Handler</a> from hc32f46x_interrupts.o(i.DebugMon_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[10]">HardFault_Handler</a> from hc32f46x_interrupts.o(i.HardFault_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[18]">IRQ000_Handler</a> from hc32f46x_interrupts.o(i.IRQ000_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[19]">IRQ001_Handler</a> from hc32f46x_interrupts.o(i.IRQ001_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[1a]">IRQ002_Handler</a> from hc32f46x_interrupts.o(i.IRQ002_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[1b]">IRQ003_Handler</a> from hc32f46x_interrupts.o(i.IRQ003_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[1c]">IRQ004_Handler</a> from hc32f46x_interrupts.o(i.IRQ004_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[1d]">IRQ005_Handler</a> from hc32f46x_interrupts.o(i.IRQ005_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[1e]">IRQ006_Handler</a> from hc32f46x_interrupts.o(i.IRQ006_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[1f]">IRQ007_Handler</a> from hc32f46x_interrupts.o(i.IRQ007_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[20]">IRQ008_Handler</a> from hc32f46x_interrupts.o(i.IRQ008_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[21]">IRQ009_Handler</a> from hc32f46x_interrupts.o(i.IRQ009_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[22]">IRQ010_Handler</a> from hc32f46x_interrupts.o(i.IRQ010_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[23]">IRQ011_Handler</a> from hc32f46x_interrupts.o(i.IRQ011_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[24]">IRQ012_Handler</a> from hc32f46x_interrupts.o(i.IRQ012_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[25]">IRQ013_Handler</a> from hc32f46x_interrupts.o(i.IRQ013_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[26]">IRQ014_Handler</a> from hc32f46x_interrupts.o(i.IRQ014_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[27]">IRQ015_Handler</a> from hc32f46x_interrupts.o(i.IRQ015_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[28]">IRQ016_Handler</a> from hc32f46x_interrupts.o(i.IRQ016_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[29]">IRQ017_Handler</a> from hc32f46x_interrupts.o(i.IRQ017_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[2a]">IRQ018_Handler</a> from hc32f46x_interrupts.o(i.IRQ018_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[2b]">IRQ019_Handler</a> from hc32f46x_interrupts.o(i.IRQ019_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[2c]">IRQ020_Handler</a> from hc32f46x_interrupts.o(i.IRQ020_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[2d]">IRQ021_Handler</a> from hc32f46x_interrupts.o(i.IRQ021_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[2e]">IRQ022_Handler</a> from hc32f46x_interrupts.o(i.IRQ022_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[2f]">IRQ023_Handler</a> from hc32f46x_interrupts.o(i.IRQ023_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[30]">IRQ024_Handler</a> from hc32f46x_interrupts.o(i.IRQ024_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[31]">IRQ025_Handler</a> from hc32f46x_interrupts.o(i.IRQ025_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[32]">IRQ026_Handler</a> from hc32f46x_interrupts.o(i.IRQ026_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[33]">IRQ027_Handler</a> from hc32f46x_interrupts.o(i.IRQ027_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[34]">IRQ028_Handler</a> from hc32f46x_interrupts.o(i.IRQ028_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[35]">IRQ029_Handler</a> from hc32f46x_interrupts.o(i.IRQ029_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[36]">IRQ030_Handler</a> from hc32f46x_interrupts.o(i.IRQ030_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[37]">IRQ031_Handler</a> from hc32f46x_interrupts.o(i.IRQ031_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[38]">IRQ032_Handler</a> from hc32f46x_interrupts.o(i.IRQ032_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[39]">IRQ033_Handler</a> from hc32f46x_interrupts.o(i.IRQ033_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[3a]">IRQ034_Handler</a> from hc32f46x_interrupts.o(i.IRQ034_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[3b]">IRQ035_Handler</a> from hc32f46x_interrupts.o(i.IRQ035_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[3c]">IRQ036_Handler</a> from hc32f46x_interrupts.o(i.IRQ036_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[3d]">IRQ037_Handler</a> from hc32f46x_interrupts.o(i.IRQ037_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[3e]">IRQ038_Handler</a> from hc32f46x_interrupts.o(i.IRQ038_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[3f]">IRQ039_Handler</a> from hc32f46x_interrupts.o(i.IRQ039_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[40]">IRQ040_Handler</a> from hc32f46x_interrupts.o(i.IRQ040_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[41]">IRQ041_Handler</a> from hc32f46x_interrupts.o(i.IRQ041_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[42]">IRQ042_Handler</a> from hc32f46x_interrupts.o(i.IRQ042_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[43]">IRQ043_Handler</a> from hc32f46x_interrupts.o(i.IRQ043_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[44]">IRQ044_Handler</a> from hc32f46x_interrupts.o(i.IRQ044_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[45]">IRQ045_Handler</a> from hc32f46x_interrupts.o(i.IRQ045_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[46]">IRQ046_Handler</a> from hc32f46x_interrupts.o(i.IRQ046_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[47]">IRQ047_Handler</a> from hc32f46x_interrupts.o(i.IRQ047_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[48]">IRQ048_Handler</a> from hc32f46x_interrupts.o(i.IRQ048_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[49]">IRQ049_Handler</a> from hc32f46x_interrupts.o(i.IRQ049_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[4a]">IRQ050_Handler</a> from hc32f46x_interrupts.o(i.IRQ050_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[4b]">IRQ051_Handler</a> from hc32f46x_interrupts.o(i.IRQ051_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[4c]">IRQ052_Handler</a> from hc32f46x_interrupts.o(i.IRQ052_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[4d]">IRQ053_Handler</a> from hc32f46x_interrupts.o(i.IRQ053_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[4e]">IRQ054_Handler</a> from hc32f46x_interrupts.o(i.IRQ054_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[4f]">IRQ055_Handler</a> from hc32f46x_interrupts.o(i.IRQ055_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[50]">IRQ056_Handler</a> from hc32f46x_interrupts.o(i.IRQ056_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[51]">IRQ057_Handler</a> from hc32f46x_interrupts.o(i.IRQ057_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[52]">IRQ058_Handler</a> from hc32f46x_interrupts.o(i.IRQ058_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[53]">IRQ059_Handler</a> from hc32f46x_interrupts.o(i.IRQ059_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[54]">IRQ060_Handler</a> from hc32f46x_interrupts.o(i.IRQ060_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[55]">IRQ061_Handler</a> from hc32f46x_interrupts.o(i.IRQ061_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[56]">IRQ062_Handler</a> from hc32f46x_interrupts.o(i.IRQ062_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[57]">IRQ063_Handler</a> from hc32f46x_interrupts.o(i.IRQ063_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[58]">IRQ064_Handler</a> from hc32f46x_interrupts.o(i.IRQ064_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[59]">IRQ065_Handler</a> from hc32f46x_interrupts.o(i.IRQ065_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[5a]">IRQ066_Handler</a> from hc32f46x_interrupts.o(i.IRQ066_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[5b]">IRQ067_Handler</a> from hc32f46x_interrupts.o(i.IRQ067_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[5c]">IRQ068_Handler</a> from hc32f46x_interrupts.o(i.IRQ068_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[5d]">IRQ069_Handler</a> from hc32f46x_interrupts.o(i.IRQ069_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[5e]">IRQ070_Handler</a> from hc32f46x_interrupts.o(i.IRQ070_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[5f]">IRQ071_Handler</a> from hc32f46x_interrupts.o(i.IRQ071_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[60]">IRQ072_Handler</a> from hc32f46x_interrupts.o(i.IRQ072_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[61]">IRQ073_Handler</a> from hc32f46x_interrupts.o(i.IRQ073_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[62]">IRQ074_Handler</a> from hc32f46x_interrupts.o(i.IRQ074_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[63]">IRQ075_Handler</a> from hc32f46x_interrupts.o(i.IRQ075_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[64]">IRQ076_Handler</a> from hc32f46x_interrupts.o(i.IRQ076_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[65]">IRQ077_Handler</a> from hc32f46x_interrupts.o(i.IRQ077_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[66]">IRQ078_Handler</a> from hc32f46x_interrupts.o(i.IRQ078_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[67]">IRQ079_Handler</a> from hc32f46x_interrupts.o(i.IRQ079_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[68]">IRQ080_Handler</a> from hc32f46x_interrupts.o(i.IRQ080_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[69]">IRQ081_Handler</a> from hc32f46x_interrupts.o(i.IRQ081_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[6a]">IRQ082_Handler</a> from hc32f46x_interrupts.o(i.IRQ082_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[6b]">IRQ083_Handler</a> from hc32f46x_interrupts.o(i.IRQ083_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[6c]">IRQ084_Handler</a> from hc32f46x_interrupts.o(i.IRQ084_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[6d]">IRQ085_Handler</a> from hc32f46x_interrupts.o(i.IRQ085_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[6e]">IRQ086_Handler</a> from hc32f46x_interrupts.o(i.IRQ086_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[6f]">IRQ087_Handler</a> from hc32f46x_interrupts.o(i.IRQ087_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[70]">IRQ088_Handler</a> from hc32f46x_interrupts.o(i.IRQ088_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[71]">IRQ089_Handler</a> from hc32f46x_interrupts.o(i.IRQ089_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[72]">IRQ090_Handler</a> from hc32f46x_interrupts.o(i.IRQ090_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[73]">IRQ091_Handler</a> from hc32f46x_interrupts.o(i.IRQ091_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[74]">IRQ092_Handler</a> from hc32f46x_interrupts.o(i.IRQ092_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[75]">IRQ093_Handler</a> from hc32f46x_interrupts.o(i.IRQ093_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[76]">IRQ094_Handler</a> from hc32f46x_interrupts.o(i.IRQ094_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[77]">IRQ095_Handler</a> from hc32f46x_interrupts.o(i.IRQ095_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[78]">IRQ096_Handler</a> from hc32f46x_interrupts.o(i.IRQ096_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[79]">IRQ097_Handler</a> from hc32f46x_interrupts.o(i.IRQ097_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[7a]">IRQ098_Handler</a> from hc32f46x_interrupts.o(i.IRQ098_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[7b]">IRQ099_Handler</a> from hc32f46x_interrupts.o(i.IRQ099_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[7c]">IRQ100_Handler</a> from hc32f46x_interrupts.o(i.IRQ100_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[7d]">IRQ101_Handler</a> from hc32f46x_interrupts.o(i.IRQ101_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[7e]">IRQ102_Handler</a> from hc32f46x_interrupts.o(i.IRQ102_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[7f]">IRQ103_Handler</a> from hc32f46x_interrupts.o(i.IRQ103_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[80]">IRQ104_Handler</a> from hc32f46x_interrupts.o(i.IRQ104_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[81]">IRQ105_Handler</a> from hc32f46x_interrupts.o(i.IRQ105_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[82]">IRQ106_Handler</a> from hc32f46x_interrupts.o(i.IRQ106_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[83]">IRQ107_Handler</a> from hc32f46x_interrupts.o(i.IRQ107_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[84]">IRQ108_Handler</a> from hc32f46x_interrupts.o(i.IRQ108_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[85]">IRQ109_Handler</a> from hc32f46x_interrupts.o(i.IRQ109_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[86]">IRQ110_Handler</a> from hc32f46x_interrupts.o(i.IRQ110_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[87]">IRQ111_Handler</a> from hc32f46x_interrupts.o(i.IRQ111_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[88]">IRQ112_Handler</a> from hc32f46x_interrupts.o(i.IRQ112_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[89]">IRQ113_Handler</a> from hc32f46x_interrupts.o(i.IRQ113_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[8a]">IRQ114_Handler</a> from hc32f46x_interrupts.o(i.IRQ114_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[8b]">IRQ115_Handler</a> from hc32f46x_interrupts.o(i.IRQ115_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[8c]">IRQ116_Handler</a> from hc32f46x_interrupts.o(i.IRQ116_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[8d]">IRQ117_Handler</a> from hc32f46x_interrupts.o(i.IRQ117_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[8e]">IRQ118_Handler</a> from hc32f46x_interrupts.o(i.IRQ118_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[8f]">IRQ119_Handler</a> from hc32f46x_interrupts.o(i.IRQ119_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[90]">IRQ120_Handler</a> from hc32f46x_interrupts.o(i.IRQ120_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[91]">IRQ121_Handler</a> from hc32f46x_interrupts.o(i.IRQ121_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[92]">IRQ122_Handler</a> from hc32f46x_interrupts.o(i.IRQ122_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[93]">IRQ123_Handler</a> from hc32f46x_interrupts.o(i.IRQ123_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[94]">IRQ124_Handler</a> from hc32f46x_interrupts.o(i.IRQ124_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[95]">IRQ125_Handler</a> from hc32f46x_interrupts.o(i.IRQ125_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[96]">IRQ126_Handler</a> from hc32f46x_interrupts.o(i.IRQ126_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[97]">IRQ127_Handler</a> from hc32f46x_interrupts.o(i.IRQ127_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[98]">IRQ128_Handler</a> from hc32f46x_interrupts.o(i.IRQ128_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[99]">IRQ129_Handler</a> from hc32f46x_interrupts.o(i.IRQ129_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[9a]">IRQ130_Handler</a> from hc32f46x_interrupts.o(i.IRQ130_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[9b]">IRQ131_Handler</a> from hc32f46x_interrupts.o(i.IRQ131_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[9c]">IRQ132_Handler</a> from hc32f46x_interrupts.o(i.IRQ132_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[9d]">IRQ133_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[9e]">IRQ134_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[9f]">IRQ135_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[a0]">IRQ136_Handler</a> from hc32f46x_interrupts.o(i.IRQ136_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[a1]">IRQ137_Handler</a> from hc32f46x_interrupts.o(i.IRQ137_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[a2]">IRQ138_Handler</a> from hc32f46x_interrupts.o(i.IRQ138_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[a3]">IRQ139_Handler</a> from hc32f46x_interrupts.o(i.IRQ139_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[a4]">IRQ140_Handler</a> from hc32f46x_interrupts.o(i.IRQ140_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[a5]">IRQ141_Handler</a> from hc32f46x_interrupts.o(i.IRQ141_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[a6]">IRQ142_Handler</a> from hc32f46x_interrupts.o(i.IRQ142_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[a7]">IRQ143_Handler</a> from hc32f46x_interrupts.o(i.IRQ143_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[11]">MemManage_Handler</a> from hc32f46x_interrupts.o(i.MemManage_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[f]">NMI_Handler</a> from hc32f46x_interrupts.o(i.NMI_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[16]">PendSV_Handler</a> from port_s.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[e]">Reset_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[14]">SVC_Handler</a> from hc32f46x_interrupts.o(i.SVC_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[17]">SysTick_Handler</a> from hc32f46x_interrupts.o(i.SysTick_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[a9]">SystemInit</a> from system_hc32f46x.o(i.SystemInit) referenced from startup_hc32f46x.o(.text)
 <LI><a href="#[13]">UsageFault_Handler</a> from hc32f46x_interrupts.o(i.UsageFault_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[aa]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_hc32f46x.o(.text)
 <LI><a href="#[ac]">_sputc</a> from printf8.o(i._sputc) referenced from printf8.o(i.__0sprintf$8)
 <LI><a href="#[1]">cut_test_task_aos_1_006_run</a> from rhino_test_nano.o(i.cut_test_task_aos_1_006_run) referenced 2 times from rhino_test_nano.o(.data)
 <LI><a href="#[2]">cut_test_task_aos_1_007_run</a> from rhino_test_nano.o(i.cut_test_task_aos_1_007_run) referenced 2 times from rhino_test_nano.o(.data)
 <LI><a href="#[3]">cut_test_task_aos_1_008_run</a> from rhino_test_nano.o(i.cut_test_task_aos_1_008_run) referenced 2 times from rhino_test_nano.o(.data)
 <LI><a href="#[4]">cut_test_task_aos_1_009_run</a> from rhino_test_nano.o(i.cut_test_task_aos_1_009_run) referenced 2 times from rhino_test_nano.o(.data)
 <LI><a href="#[5]">cut_test_task_aos_1_010_run</a> from rhino_test_nano.o(i.cut_test_task_aos_1_010_run) referenced 2 times from rhino_test_nano.o(.data)
 <LI><a href="#[6]">cut_test_task_aos_1_011_run</a> from rhino_test_nano.o(i.cut_test_task_aos_1_011_run) referenced 2 times from rhino_test_nano.o(.data)
 <LI><a href="#[7]">cut_test_task_aos_1_012_run</a> from rhino_test_nano.o(i.cut_test_task_aos_1_012_run) referenced 2 times from rhino_test_nano.o(.data)
 <LI><a href="#[8]">cut_test_task_comm_aos_1_013_run</a> from rhino_test_nano.o(i.cut_test_task_comm_aos_1_013_run) referenced 2 times from rhino_test_nano.o(.data)
 <LI><a href="#[9]">cut_test_task_comm_aos_1_014_run</a> from rhino_test_nano.o(i.cut_test_task_comm_aos_1_014_run) referenced 2 times from rhino_test_nano.o(.data)
 <LI><a href="#[a]">cut_test_task_comm_aos_1_015_run</a> from rhino_test_nano.o(i.cut_test_task_comm_aos_1_015_run) referenced 2 times from rhino_test_nano.o(.data)
 <LI><a href="#[b]">cut_test_task_comm_aos_1_016_run</a> from rhino_test_nano.o(i.cut_test_task_comm_aos_1_016_run) referenced 2 times from rhino_test_nano.o(.data)
 <LI><a href="#[c]">cut_test_task_comm_aos_1_017_run</a> from rhino_test_nano.o(i.cut_test_task_comm_aos_1_017_run) referenced 2 times from rhino_test_nano.o(.data)
 <LI><a href="#[d]">cut_test_task_comm_aos_1_018_run</a> from rhino_test_nano.o(i.cut_test_task_comm_aos_1_018_run) referenced 2 times from rhino_test_nano.o(.data)
 <LI><a href="#[ab]">fputc</a> from hc32f46x_utility.o(i.fputc) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[b5]">idle_task</a> from k_idle.o(i.idle_task) referenced from k_sys.o(i.krhino_init)
 <LI><a href="#[ad]">krhino_task_deathbed</a> from k_task.o(i.krhino_task_deathbed) referenced from port_c.o(i.cpu_task_stack_init)
 <LI><a href="#[a8]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[0]">soc_err_proc</a> from soc_impl.o(i.soc_err_proc) referenced 2 times from soc_impl.o(.data)
 <LI><a href="#[ae]">task0</a> from rhino_test_nano.o(i.task0) referenced from rhino_test_nano.o(i.cut_test_task_aos_1_006_run)
 <LI><a href="#[ae]">task0</a> from rhino_test_nano.o(i.task0) referenced from rhino_test_nano.o(i.cut_test_task_aos_1_011_run)
 <LI><a href="#[ae]">task0</a> from rhino_test_nano.o(i.task0) referenced from rhino_test_nano.o(i.cut_test_task_aos_1_012_run)
 <LI><a href="#[af]">task1</a> from rhino_test_nano.o(i.task1) referenced from rhino_test_nano.o(i.cut_test_task_comm_aos_1_014_run)
 <LI><a href="#[b0]">task2</a> from rhino_test_nano.o(i.task2) referenced from rhino_test_nano.o(i.cut_test_task_comm_aos_1_014_run)
 <LI><a href="#[b1]">task3</a> from rhino_test_nano.o(i.task3) referenced from rhino_test_nano.o(i.cut_test_task_comm_aos_1_016_run)
 <LI><a href="#[b2]">task4</a> from rhino_test_nano.o(i.task4) referenced from rhino_test_nano.o(i.cut_test_task_comm_aos_1_016_run)
 <LI><a href="#[b3]">task5</a> from rhino_test_nano.o(i.task5) referenced from rhino_test_nano.o(i.cut_test_task_comm_aos_1_018_run)
 <LI><a href="#[b4]">task6</a> from rhino_test_nano.o(i.task6) referenced from rhino_test_nano.o(i.cut_test_task_comm_aos_1_018_run)
 <LI><a href="#[b7]">test_task</a> from rhino_test_nano.o(i.test_task) referenced from rhino_test_nano.o(i.test_certificate)
 <LI><a href="#[b6]">timer_task</a> from k_timer.o(i.timer_task) referenced from k_timer.o(i.ktimer_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[aa]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(.text)
</UL>
<P><STRONG><a name="[169]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[b8]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[c2]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[16a]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[16b]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[16c]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[16d]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[16e]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[138]"></a>FPU_Enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fpu_enable.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e]"></a>Reset_Handler</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>IRQ133_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ133_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ133_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[9e]"></a>IRQ134_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>IRQ135_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[d8]"></a>cpu_intrpt_save</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_queue_recv
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_queue_del
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_create
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_send
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_create
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mblk_pool_init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mblk_free
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mblk_alloc
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_add_mm_region
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_free
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_alloc
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_task
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_recv
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_queue_create
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_take
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_del
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_unlock
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_lock
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_del
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sys_tick_get
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_update
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_del
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_cur_task_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_exit
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_enter
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_give
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_create
</UL>

<P><STRONG><a name="[d9]"></a>cpu_intrpt_restore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_queue_recv
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_queue_del
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_create
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_send
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_create
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mblk_pool_init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mblk_free
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mblk_alloc
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_add_mm_region
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_free
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_alloc
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_task
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_recv
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_queue_create
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_take
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_del
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_unlock
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_lock
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_del
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sys_tick_get
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_update
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_del
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_cur_task_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_exit
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_enter
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_give
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_create
</UL>

<P><STRONG><a name="[e1]"></a>cpu_task_switch</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
</UL>

<P><STRONG><a name="[11e]"></a>cpu_intrpt_switch</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_exit
</UL>

<P><STRONG><a name="[12d]"></a>cpu_first_task_start</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_start
</UL>

<P><STRONG><a name="[16]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = PendSV_Handler &rArr; krhino_stack_ovf_check &rArr; k_err_proc
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_first_task_restore
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_stack_ovf_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[ba]"></a>_first_task_restore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[bc]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUartBaudrate
</UL>

<P><STRONG><a name="[151]"></a>__aeabi_assert</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, armcc_libc.o(i.__aeabi_assert))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_err_proc
</UL>

<P><STRONG><a name="[16f]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[170]"></a>___aeabi_memcpy8$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memcpy.o(.text), UNUSED)

<P><STRONG><a name="[14c]"></a>__aeabi_memcpy</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_headlen_decompress
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_push
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_pop
</UL>

<P><STRONG><a name="[e8]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_mm_overview
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_int2str
</UL>

<P><STRONG><a name="[171]"></a>memcpy</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memcpy.o(.text), UNUSED)

<P><STRONG><a name="[c0]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[172]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[173]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[bf]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_add_mm_region
</UL>

<P><STRONG><a name="[11c]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clk_init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init_mm_head
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create
</UL>

<P><STRONG><a name="[174]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[c1]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[ff]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_arg
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter
</UL>

<P><STRONG><a name="[fe]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_arg
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter
</UL>

<P><STRONG><a name="[be]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[175]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[bd]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[176]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[b9]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[177]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[178]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[179]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[12]"></a>BusFault_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.BusFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[13a]"></a>CLK_GetClockFreq</STRONG> (Thumb, 282 bytes, Stack size 16 bytes, hc32f46x_clk.o(i.CLK_GetClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLK_GetClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c4]"></a>CLK_GetFlagStatus</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, hc32f46x_clk.o(i.CLK_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clk_init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_MpllCmd
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_HrcCmd
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XtalCmd
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_UpllCmd
</UL>

<P><STRONG><a name="[c3]"></a>CLK_HrcCmd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, hc32f46x_clk.o(i.CLK_HrcCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLK_HrcCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clk_init
</UL>

<P><STRONG><a name="[153]"></a>CLK_LrcCmd</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, hc32f46x_clk.o(i.CLK_LrcCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLK_LrcCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clk_init
</UL>

<P><STRONG><a name="[c5]"></a>CLK_MpllCmd</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, hc32f46x_clk.o(i.CLK_MpllCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLK_MpllCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clk_init
</UL>

<P><STRONG><a name="[157]"></a>CLK_MpllConfig</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, hc32f46x_clk.o(i.CLK_MpllConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLK_MpllConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clk_init
</UL>

<P><STRONG><a name="[159]"></a>CLK_SetPeriClkSource</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, hc32f46x_clk.o(i.CLK_SetPeriClkSource))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clk_init
</UL>

<P><STRONG><a name="[156]"></a>CLK_SetPllSource</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, hc32f46x_clk.o(i.CLK_SetPllSource))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clk_init
</UL>

<P><STRONG><a name="[c6]"></a>CLK_SetSysClkSource</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, hc32f46x_clk.o(i.CLK_SetSysClkSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CLK_SetSysClkSource &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clk_init
</UL>

<P><STRONG><a name="[158]"></a>CLK_SetUsbClkSource</STRONG> (Thumb, 194 bytes, Stack size 20 bytes, hc32f46x_clk.o(i.CLK_SetUsbClkSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CLK_SetUsbClkSource
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clk_init
</UL>

<P><STRONG><a name="[162]"></a>CLK_SysClkConfig</STRONG> (Thumb, 192 bytes, Stack size 20 bytes, hc32f46x_clk.o(i.CLK_SysClkConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CLK_SysClkConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clk_init
</UL>

<P><STRONG><a name="[c8]"></a>CLK_UpllCmd</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, hc32f46x_clk.o(i.CLK_UpllCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CLK_UpllCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clk_init
</UL>

<P><STRONG><a name="[154]"></a>CLK_Xtal32Cmd</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, hc32f46x_clk.o(i.CLK_Xtal32Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLK_Xtal32Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clk_init
</UL>

<P><STRONG><a name="[155]"></a>CLK_Xtal32Config</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, hc32f46x_clk.o(i.CLK_Xtal32Config))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clk_init
</UL>

<P><STRONG><a name="[c9]"></a>CLK_XtalCmd</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, hc32f46x_clk.o(i.CLK_XtalCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLK_XtalCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clk_init
</UL>

<P><STRONG><a name="[ca]"></a>Ddl_UartInit</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, hc32f46x_utility.o(i.Ddl_UartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Ddl_UartInit &rArr; SetUartBaudrate &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUartBaudrate
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15]"></a>DebugMon_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.DebugMon_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[102]"></a>DebugOutput</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_utility.o(i.DebugOutput))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[15c]"></a>EFM_InstructionCacheCmd</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_efm.o(i.EFM_InstructionCacheCmd))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clk_init
</UL>

<P><STRONG><a name="[15d]"></a>EFM_Lock</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_efm.o(i.EFM_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clk_init
</UL>

<P><STRONG><a name="[15b]"></a>EFM_SetLatency</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_efm.o(i.EFM_SetLatency))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clk_init
</UL>

<P><STRONG><a name="[15a]"></a>EFM_Unlock</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hc32f46x_efm.o(i.EFM_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clk_init
</UL>

<P><STRONG><a name="[cc]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sys_init.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[10]"></a>HardFault_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>IRQ000_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ000_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ000_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>IRQ001_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ001_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ001_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>IRQ002_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ002_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ002_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>IRQ003_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ003_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ003_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>IRQ004_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ004_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ004_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>IRQ005_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ005_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ005_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>IRQ006_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ006_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ006_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>IRQ007_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ007_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ007_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>IRQ008_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ008_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ008_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>IRQ009_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ009_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ009_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>IRQ010_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ010_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ010_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>IRQ011_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ011_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ011_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>IRQ012_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ012_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ012_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>IRQ013_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ013_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ013_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>IRQ014_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ014_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ014_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>IRQ015_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ015_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ015_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>IRQ016_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ016_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ016_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>IRQ017_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ017_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ017_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>IRQ018_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ018_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ018_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>IRQ019_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ019_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ019_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>IRQ020_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ020_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ020_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>IRQ021_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ021_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ021_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>IRQ022_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ022_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ022_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>IRQ023_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ023_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ023_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>IRQ024_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ024_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ024_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>IRQ025_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ025_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ025_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>IRQ026_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ026_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ026_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>IRQ027_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ027_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ027_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>IRQ028_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ028_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ028_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>IRQ029_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ029_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ029_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>IRQ030_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ030_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ030_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>IRQ031_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ031_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ031_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>IRQ032_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ032_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ032_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>IRQ033_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ033_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ033_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>IRQ034_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ034_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ034_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>IRQ035_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ035_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ035_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>IRQ036_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ036_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ036_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>IRQ037_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ037_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ037_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>IRQ038_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ038_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ038_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>IRQ039_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ039_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ039_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>IRQ040_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ040_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ040_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>IRQ041_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ041_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ041_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>IRQ042_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ042_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ042_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>IRQ043_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ043_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ043_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>IRQ044_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ044_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ044_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>IRQ045_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ045_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ045_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>IRQ046_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ046_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ046_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>IRQ047_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ047_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ047_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>IRQ048_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ048_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ048_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>IRQ049_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ049_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ049_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>IRQ050_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ050_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ050_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>IRQ051_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ051_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ051_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>IRQ052_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ052_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ052_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>IRQ053_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ053_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ053_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>IRQ054_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ054_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ054_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>IRQ055_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ055_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ055_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>IRQ056_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ056_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ056_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>IRQ057_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ057_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ057_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>IRQ058_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ058_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ058_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>IRQ059_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ059_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ059_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>IRQ060_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ060_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ060_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>IRQ061_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ061_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ061_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>IRQ062_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ062_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ062_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>IRQ063_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ063_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ063_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>IRQ064_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ064_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ064_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>IRQ065_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ065_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ065_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>IRQ066_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ066_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ066_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>IRQ067_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ067_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ067_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>IRQ068_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ068_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ068_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>IRQ069_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ069_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ069_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>IRQ070_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ070_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ070_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>IRQ071_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ071_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ071_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>IRQ072_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ072_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ072_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>IRQ073_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ073_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ073_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>IRQ074_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ074_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ074_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>IRQ075_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ075_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ075_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>IRQ076_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ076_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ076_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>IRQ077_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ077_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ077_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>IRQ078_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ078_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ078_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>IRQ079_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ079_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ079_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>IRQ080_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ080_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ080_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>IRQ081_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ081_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ081_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>IRQ082_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ082_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ082_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>IRQ083_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ083_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ083_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>IRQ084_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ084_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ084_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>IRQ085_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ085_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ085_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>IRQ086_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ086_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ086_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>IRQ087_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ087_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ087_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>IRQ088_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ088_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ088_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>IRQ089_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ089_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ089_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>IRQ090_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ090_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ090_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>IRQ091_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ091_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ091_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>IRQ092_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ092_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ092_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>IRQ093_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ093_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ093_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>IRQ094_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ094_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ094_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>IRQ095_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ095_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ095_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>IRQ096_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ096_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ096_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>IRQ097_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ097_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ097_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>IRQ098_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ098_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ098_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>IRQ099_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ099_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ099_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>IRQ100_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ100_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ100_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>IRQ101_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ101_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ101_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>IRQ102_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ102_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ102_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>IRQ103_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ103_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ103_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>IRQ104_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ104_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ104_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>IRQ105_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ105_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ105_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>IRQ106_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ106_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ106_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>IRQ107_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ107_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ107_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>IRQ108_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ108_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ108_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>IRQ109_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ109_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ109_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>IRQ110_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ110_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ110_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>IRQ111_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ111_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ111_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>IRQ112_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ112_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ112_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>IRQ113_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ113_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ113_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>IRQ114_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ114_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ114_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>IRQ115_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ115_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ115_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>IRQ116_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ116_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ116_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>IRQ117_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ117_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ117_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>IRQ118_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ118_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ118_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>IRQ119_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ119_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ119_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>IRQ120_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ120_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ120_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>IRQ121_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ121_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ121_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>IRQ122_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ122_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ122_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>IRQ123_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ123_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ123_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>IRQ124_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ124_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ124_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>IRQ125_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ125_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ125_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>IRQ126_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ126_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ126_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>IRQ127_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ127_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ127_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>IRQ128_Handler</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ128_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ128_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>IRQ129_Handler</STRONG> (Thumb, 752 bytes, Stack size 16 bytes, hc32f46x_interrupts.o(i.IRQ129_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ129_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[9a]"></a>IRQ130_Handler</STRONG> (Thumb, 190 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ130_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ130_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>IRQ131_Handler</STRONG> (Thumb, 684 bytes, Stack size 16 bytes, hc32f46x_interrupts.o(i.IRQ131_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ131_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>IRQ132_Handler</STRONG> (Thumb, 350 bytes, Stack size 16 bytes, hc32f46x_interrupts.o(i.IRQ132_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ132_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[a0]"></a>IRQ136_Handler</STRONG> (Thumb, 750 bytes, Stack size 16 bytes, hc32f46x_interrupts.o(i.IRQ136_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ136_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[a1]"></a>IRQ137_Handler</STRONG> (Thumb, 620 bytes, Stack size 16 bytes, hc32f46x_interrupts.o(i.IRQ137_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ137_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[a2]"></a>IRQ138_Handler</STRONG> (Thumb, 546 bytes, Stack size 16 bytes, hc32f46x_interrupts.o(i.IRQ138_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ138_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[a3]"></a>IRQ139_Handler</STRONG> (Thumb, 280 bytes, Stack size 16 bytes, hc32f46x_interrupts.o(i.IRQ139_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ139_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[a4]"></a>IRQ140_Handler</STRONG> (Thumb, 490 bytes, Stack size 16 bytes, hc32f46x_interrupts.o(i.IRQ140_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ140_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[a5]"></a>IRQ141_Handler</STRONG> (Thumb, 524 bytes, Stack size 16 bytes, hc32f46x_interrupts.o(i.IRQ141_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ141_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[a6]"></a>IRQ142_Handler</STRONG> (Thumb, 242 bytes, Stack size 16 bytes, hc32f46x_interrupts.o(i.IRQ142_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ142_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[a7]"></a>IRQ143_Handler</STRONG> (Thumb, 256 bytes, Stack size 40 bytes, hc32f46x_interrupts.o(i.IRQ143_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IRQ143_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>MemManage_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.MemManage_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>NMI_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.NMI_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[161]"></a>SRAM_CK_Disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hc32f46x_sram.o(i.SRAM_CK_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clk_init
</UL>

<P><STRONG><a name="[15f]"></a>SRAM_CK_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hc32f46x_sram.o(i.SRAM_CK_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clk_init
</UL>

<P><STRONG><a name="[160]"></a>SRAM_WT_Disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hc32f46x_sram.o(i.SRAM_WT_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clk_init
</UL>

<P><STRONG><a name="[15e]"></a>SRAM_WT_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hc32f46x_sram.o(i.SRAM_WT_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clk_init
</UL>

<P><STRONG><a name="[14]"></a>SVC_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.SVC_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>SysTick_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; krhino_tick_proc &rArr; tick_list_update &rArr; mutex_task_pri_reset &rArr; mutex_release &rArr; task_pri_change &rArr; mutex_pri_look
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_tick_proc
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_exit
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[c7]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, system_hc32f46x.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetSysClkSource
</UL>

<P><STRONG><a name="[a9]"></a>SystemInit</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, system_hc32f46x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(.text)
</UL>
<P><STRONG><a name="[13]"></a>UsageFault_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.UsageFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[d0]"></a>__0printf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[17a]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[e5]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_mm_overview
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_get_stack_min_free
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usage
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_arg
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_result_report
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_main
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_task
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task6
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task5
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_test_config
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_018_run
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_017_run
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_016_run
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_015_run
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_014_run
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_013_run
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_aos_1_012_run
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_aos_1_011_run
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_aos_1_006_run
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_print_stack
</UL>

<P><STRONG><a name="[d2]"></a>__0sprintf$8</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[17b]"></a>__1sprintf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)

<P><STRONG><a name="[f8]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_016_run
</UL>

<P><STRONG><a name="[17c]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[17d]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[df]"></a>core_sched</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, k_sched.o(i.core_sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = core_sched &rArr; preferred_cpu_ready_task_get
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_task_switch
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preferred_cpu_ready_task_get
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_queue_recv
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_queue_del
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_send
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_recv
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_take
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_del
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_unlock
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_lock
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_del
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_del
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_give
</UL>

<P><STRONG><a name="[163]"></a>cpu_task_stack_init</STRONG> (Thumb, 176 bytes, Stack size 20 bytes, port_c.o(i.cpu_task_stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = cpu_task_stack_init
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create
</UL>

<P><STRONG><a name="[e2]"></a>cut_get_stack_min_free</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, cut.o(i.cut_get_stack_min_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = cut_get_stack_min_free &rArr; krhino_task_sleep &rArr; tick_list_insert &rArr; tick_list_pri_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_stack_min_free
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_cur_task_get
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_main
</UL>

<P><STRONG><a name="[e9]"></a>cut_main</STRONG> (Thumb, 324 bytes, Stack size 32 bytes, cut.o(i.cut_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = cut_main &rArr; cut_mm_overview &rArr; cut_int2str &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_mm_overview
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_get_stack_min_free
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_arg
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_result_report
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_task
</UL>

<P><STRONG><a name="[ec]"></a>cut_mm_overview</STRONG> (Thumb, 122 bytes, Stack size 72 bytes, cut.o(i.cut_mm_overview))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = cut_mm_overview &rArr; cut_int2str &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_int2str
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_main
</UL>

<P><STRONG><a name="[ab]"></a>fputc</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, hc32f46x_utility.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugOutput
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[b5]"></a>idle_task</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, k_idle.o(i.idle_task))
<BR><BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
</UL>
<BR>[Address Reference Count : 1]<UL><LI> k_sys.o(i.krhino_init)
</UL>
<P><STRONG><a name="[de]"></a>k_err_proc</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, k_err.o(i.k_err_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = k_err_proc
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_rm
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_pri_change
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_smallblk_free
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_rm
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_state_end_proc
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_lock
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_task
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_proc
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_update
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_stack_ovf_check
</UL>

<P><STRONG><a name="[103]"></a>k_mm_alloc</STRONG> (Thumb, 332 bytes, Stack size 48 bytes, k_mm.o(i.k_mm_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; size_to_level
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;size_to_level
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_smallblk_alloc
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_freelist_insert
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_freelist_delete
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_up_level
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addsize
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init_mm_head
</UL>

<P><STRONG><a name="[107]"></a>k_mm_free</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, k_mm.o(i.k_mm_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = k_mm_free &rArr; k_mm_smallblk_free &rArr; krhino_mblk_free
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removesize
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_smallblk_free
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_freelist_insert
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_freelist_delete
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init_mm_head
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_add_mm_region
</UL>

<P><STRONG><a name="[10a]"></a>k_mm_init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, k_mm.o(i.k_mm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = k_mm_init &rArr; krhino_init_mm_head &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; size_to_level
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init_mm_head
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_add_mm_region
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init
</UL>

<P><STRONG><a name="[10f]"></a>kobj_list_init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, k_stats.o(i.kobj_list_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = kobj_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_init
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init
</UL>

<P><STRONG><a name="[10c]"></a>krhino_add_mm_region</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, k_mm.o(i.krhino_add_mm_region))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = krhino_add_mm_region &rArr; k_mm_free &rArr; k_mm_smallblk_free &rArr; krhino_mblk_free
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_free
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mm_region
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_init
</UL>

<P><STRONG><a name="[112]"></a>krhino_buf_queue_recv</STRONG> (Thumb, 320 bytes, Stack size 40 bytes, k_buf_queue.o(i.krhino_buf_queue_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = krhino_buf_queue_recv &rArr; pend_to_blk_obj &rArr; tick_list_insert &rArr; tick_list_pri_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_pop
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_is_empty
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_to_blk_obj
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_state_end_proc
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_task
</UL>

<P><STRONG><a name="[e3]"></a>krhino_cur_task_get</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, k_task.o(i.krhino_cur_task_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = krhino_cur_task_get
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_get_stack_min_free
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_print_stack
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_deathbed
</UL>

<P><STRONG><a name="[117]"></a>krhino_fix_buf_queue_create</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, k_buf_queue.o(i.krhino_fix_buf_queue_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 100 + Unknown Stack Size
<LI>Call Chain = krhino_fix_buf_queue_create &rArr; buf_queue_create &rArr; ringbuf_init
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_queue_create
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ktimer_init
</UL>

<P><STRONG><a name="[118]"></a>krhino_init</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, k_sys.o(i.krhino_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = krhino_init &rArr; ktimer_init &rArr; krhino_task_create &rArr; task_create &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ktimer_init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_create
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kobj_list_init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runqueue_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10b]"></a>krhino_init_mm_head</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, k_mm.o(i.krhino_init_mm_head))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = krhino_init_mm_head &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; size_to_level
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mblk_pool_init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_free
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_alloc
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removesize
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mm_region
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_init
</UL>

<P><STRONG><a name="[cd]"></a>krhino_intrpt_enter</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, k_sys.o(i.krhino_intrpt_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = krhino_intrpt_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[cf]"></a>krhino_intrpt_exit</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, k_sys.o(i.krhino_intrpt_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = krhino_intrpt_exit &rArr; preferred_cpu_ready_task_get
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_switch
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preferred_cpu_ready_task_get
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[10d]"></a>krhino_mblk_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, k_mm_blk.o(i.krhino_mblk_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = krhino_mblk_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_smallblk_alloc
</UL>

<P><STRONG><a name="[10e]"></a>krhino_mblk_free</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, k_mm_blk.o(i.krhino_mblk_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = krhino_mblk_free
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_smallblk_free
</UL>

<P><STRONG><a name="[11d]"></a>krhino_mblk_pool_init</STRONG> (Thumb, 214 bytes, Stack size 56 bytes, k_mm_blk.o(i.krhino_mblk_pool_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = krhino_mblk_pool_init
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init_mm_head
</UL>

<P><STRONG><a name="[f0]"></a>krhino_mutex_create</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, k_mutex.o(i.krhino_mutex_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = krhino_mutex_create &rArr; mutex_create
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_create
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_014_run
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_013_run
</UL>

<P><STRONG><a name="[f3]"></a>krhino_mutex_del</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, k_mutex.o(i.krhino_mutex_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = krhino_mutex_del &rArr; mutex_release &rArr; task_pri_change &rArr; mutex_pri_look
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_release
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_klist_empty
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_rm
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_014_run
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_013_run
</UL>

<P><STRONG><a name="[f1]"></a>krhino_mutex_lock</STRONG> (Thumb, 360 bytes, Stack size 40 bytes, k_mutex.o(i.krhino_mutex_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = krhino_mutex_lock &rArr; pend_to_blk_obj &rArr; tick_list_insert &rArr; tick_list_pri_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_pri_change
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_to_blk_obj
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_state_end_proc
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task2
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task1
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_013_run
</UL>

<P><STRONG><a name="[f2]"></a>krhino_mutex_unlock</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, k_mutex.o(i.krhino_mutex_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = krhino_mutex_unlock &rArr; mutex_release &rArr; task_pri_change &rArr; mutex_pri_look
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_release
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_klist_empty
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task2
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task1
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_013_run
</UL>

<P><STRONG><a name="[fc]"></a>krhino_queue_back_send</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, k_queue.o(i.krhino_queue_back_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = krhino_queue_back_send &rArr; msg_send &rArr; task_msg_recv &rArr; pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_send
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task6
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task5
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_018_run
</UL>

<P><STRONG><a name="[f9]"></a>krhino_queue_create</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, k_queue.o(i.krhino_queue_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + Unknown Stack Size
<LI>Call Chain = krhino_queue_create &rArr; queue_create &rArr; ringbuf_init
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_create
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_018_run
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_017_run
</UL>

<P><STRONG><a name="[fb]"></a>krhino_queue_del</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, k_queue.o(i.krhino_queue_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = krhino_queue_del &rArr; pend_task_rm &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_klist_empty
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_reset
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_rm
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_018_run
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_017_run
</UL>

<P><STRONG><a name="[fa]"></a>krhino_queue_recv</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, k_queue.o(i.krhino_queue_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = krhino_queue_recv &rArr; pend_to_blk_obj &rArr; tick_list_insert &rArr; tick_list_pri_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_pop
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_to_blk_obj
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_state_end_proc
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task6
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task5
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_018_run
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_017_run
</UL>

<P><STRONG><a name="[f4]"></a>krhino_sem_create</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, k_sem.o(i.krhino_sem_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = krhino_sem_create &rArr; sem_create
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_create
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_016_run
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_015_run
</UL>

<P><STRONG><a name="[f7]"></a>krhino_sem_del</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, k_sem.o(i.krhino_sem_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = krhino_sem_del &rArr; pend_task_rm &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_rm
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_klist_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_016_run
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_015_run
</UL>

<P><STRONG><a name="[f6]"></a>krhino_sem_give</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, k_sem.o(i.krhino_sem_give))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = krhino_sem_give &rArr; sem_give &rArr; pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_give
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task4
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task3
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_015_run
</UL>

<P><STRONG><a name="[f5]"></a>krhino_sem_take</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, k_sem.o(i.krhino_sem_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = krhino_sem_take &rArr; pend_to_blk_obj &rArr; tick_list_insert &rArr; tick_list_pri_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_to_blk_obj
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_state_end_proc
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task4
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task3
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_015_run
</UL>

<P><STRONG><a name="[bb]"></a>krhino_stack_ovf_check</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, k_stats.o(i.krhino_stack_ovf_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = krhino_stack_ovf_check &rArr; k_err_proc
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[12c]"></a>krhino_start</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, k_sys.o(i.krhino_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = krhino_start &rArr; preferred_cpu_ready_task_get
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_first_task_start
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preferred_cpu_ready_task_get
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12e]"></a>krhino_sys_tick_get</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, k_time.o(i.krhino_sys_tick_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = krhino_sys_tick_get
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_task
</UL>

<P><STRONG><a name="[ee]"></a>krhino_task_create</STRONG> (Thumb, 54 bytes, Stack size 88 bytes, k_task.o(i.krhino_task_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = krhino_task_create &rArr; task_create &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_certificate
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_018_run
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_016_run
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_014_run
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_aos_1_012_run
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_aos_1_011_run
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_aos_1_006_run
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ktimer_init
</UL>

<P><STRONG><a name="[ad]"></a>krhino_task_deathbed</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, k_task.o(i.krhino_task_deathbed))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = krhino_task_deathbed &rArr; krhino_task_del &rArr; mutex_task_pri_reset &rArr; mutex_release &rArr; task_pri_change &rArr; mutex_pri_look
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_del
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_cur_task_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port_c.o(i.cpu_task_stack_init)
</UL>
<P><STRONG><a name="[ef]"></a>krhino_task_del</STRONG> (Thumb, 282 bytes, Stack size 16 bytes, k_task.o(i.krhino_task_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = krhino_task_del &rArr; mutex_task_pri_reset &rArr; mutex_release &rArr; task_pri_change &rArr; mutex_pri_look
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_rm
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_rm
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_task_pri_reset
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_mutex_free
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_rm
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_task
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_018_run
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_016_run
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_014_run
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_aos_1_012_run
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_aos_1_011_run
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_aos_1_006_run
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_deathbed
</UL>

<P><STRONG><a name="[e6]"></a>krhino_task_sleep</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, k_task.o(i.krhino_task_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = krhino_task_sleep &rArr; tick_list_insert &rArr; tick_list_pri_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_insert
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_rm
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_state_end_proc
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_get_stack_min_free
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task0
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_018_run
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_016_run
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_014_run
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_aos_1_012_run
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_aos_1_011_run
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_aos_1_006_run
</UL>

<P><STRONG><a name="[e4]"></a>krhino_task_stack_min_free</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, k_task.o(i.krhino_task_stack_min_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = krhino_task_stack_min_free
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_get_stack_min_free
</UL>

<P><STRONG><a name="[ce]"></a>krhino_tick_proc</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, k_time.o(i.krhino_tick_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = krhino_tick_proc &rArr; tick_list_update &rArr; mutex_task_pri_reset &rArr; mutex_release &rArr; task_pri_change &rArr; mutex_pri_look
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_update
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[11b]"></a>ktimer_init</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, k_timer.o(i.ktimer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = ktimer_init &rArr; krhino_task_create &rArr; task_create &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_fix_buf_queue_create
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_create
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init
</UL>

<P><STRONG><a name="[a8]"></a>main</STRONG> (Thumb, 148 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = main &rArr; krhino_init &rArr; ktimer_init &rArr; krhino_task_create &rArr; task_create &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_certificate
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clk_init
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_start
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPU_Enable
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_UartInit
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetClockFreq
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[11f]"></a>mutex_create</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, k_mutex.o(i.mutex_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = mutex_create
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_create
</UL>

<P><STRONG><a name="[13e]"></a>mutex_pri_look</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, k_mutex.o(i.mutex_pri_look))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mutex_pri_look
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_klist_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_pri_change
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_release
</UL>

<P><STRONG><a name="[134]"></a>mutex_task_pri_reset</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, k_mutex.o(i.mutex_task_pri_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mutex_task_pri_reset &rArr; mutex_release &rArr; task_pri_change &rArr; mutex_pri_look
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_update
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_del
</UL>

<P><STRONG><a name="[142]"></a>pend_list_reorder</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, k_pend.o(i.pend_list_reorder))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pend_list_reorder &rArr; pend_list_add
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_add
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_rm
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_pri_change
</UL>

<P><STRONG><a name="[116]"></a>pend_state_end_proc</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, k_pend.o(i.pend_state_end_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pend_state_end_proc &rArr; k_err_proc
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_queue_recv
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_recv
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_take
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_lock
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
</UL>

<P><STRONG><a name="[121]"></a>pend_task_rm</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, k_pend.o(i.pend_task_rm))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pend_task_rm &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_rm
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_rm
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_queue_del
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_del
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_del
</UL>

<P><STRONG><a name="[124]"></a>pend_task_wakeup</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, k_pend.o(i.pend_task_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_rm
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_rm
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_msg_recv
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_unlock
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_mutex_free
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_give
</UL>

<P><STRONG><a name="[115]"></a>pend_to_blk_obj</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, k_pend.o(i.pend_to_blk_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pend_to_blk_obj &rArr; tick_list_insert &rArr; tick_list_pri_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_insert
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_rm
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_add
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_queue_recv
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_recv
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_take
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_lock
</UL>

<P><STRONG><a name="[e0]"></a>preferred_cpu_ready_task_get</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, k_sched.o(i.preferred_cpu_ready_task_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = preferred_cpu_ready_task_get
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_start
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_exit
</UL>

<P><STRONG><a name="[144]"></a>ready_list_add</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, k_sched.o(i.ready_list_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add_tail
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add_head
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_rm
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_update
</UL>

<P><STRONG><a name="[146]"></a>ready_list_add_head</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, k_sched.o(i.ready_list_add_head))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ready_list_add_head &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_insert
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_ready_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_pri_change
</UL>

<P><STRONG><a name="[145]"></a>ready_list_add_tail</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, k_sched.o(i.ready_list_add_tail))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_insert
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_ready_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_pri_change
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create
</UL>

<P><STRONG><a name="[131]"></a>ready_list_rm</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, k_sched.o(i.ready_list_rm))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ready_list_rm &rArr; k_err_proc
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_find_first_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_pri_change
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_to_blk_obj
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_del
</UL>

<P><STRONG><a name="[da]"></a>ringbuf_init</STRONG> (Thumb, 30 bytes, Stack size 20 bytes, k_ringbuf.o(i.ringbuf_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ringbuf_init
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_create
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_queue_create
</UL>

<P><STRONG><a name="[113]"></a>ringbuf_is_empty</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, k_ringbuf.o(i.ringbuf_is_empty))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_pop
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_recv
</UL>

<P><STRONG><a name="[14d]"></a>ringbuf_is_full</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, k_ringbuf.o(i.ringbuf_is_full))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_push
</UL>

<P><STRONG><a name="[114]"></a>ringbuf_pop</STRONG> (Thumb, 324 bytes, Stack size 40 bytes, k_ringbuf.o(i.ringbuf_pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ringbuf_pop &rArr; ringbuf_headlen_decompress &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_headlen_decompress
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_is_empty
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_queue_recv
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_recv
</UL>

<P><STRONG><a name="[13c]"></a>ringbuf_push</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, k_ringbuf.o(i.ringbuf_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ringbuf_push &rArr; ringbuf_headlen_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_is_full
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_headlen_compress
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_send
</UL>

<P><STRONG><a name="[128]"></a>ringbuf_reset</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, k_ringbuf.o(i.ringbuf_reset))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_queue_del
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_init
</UL>

<P><STRONG><a name="[119]"></a>runqueue_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, k_sched.o(i.runqueue_init))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init
</UL>

<P><STRONG><a name="[164]"></a>sdk_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys_init.o(i.sdk_init))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_certificate
</UL>

<P><STRONG><a name="[0]"></a>soc_err_proc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, soc_impl.o(i.soc_err_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = soc_err_proc &rArr; soc_print_stack &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_print_stack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> soc_impl.o(.data)
</UL>
<P><STRONG><a name="[152]"></a>soc_get_cur_sp</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, soc_impl.o(i.soc_get_cur_sp))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_print_stack
</UL>

<P><STRONG><a name="[139]"></a>system_clk_init</STRONG> (Thumb, 346 bytes, Stack size 72 bytes, system_clk.o(i.system_clk_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = system_clk_init &rArr; CLK_SetSysClkSource &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetSysClkSource
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetPllSource
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetPeriClkSource
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_MpllConfig
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_MpllCmd
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_LrcCmd
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_HrcCmd
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetFlagStatus
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_WT_Enable
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_WT_Disable
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_CK_Enable
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_CK_Disable
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_Unlock
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SetLatency
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_Lock
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_InstructionCacheCmd
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XtalCmd
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_Xtal32Config
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_Xtal32Cmd
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_UpllCmd
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SysClkConfig
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetUsbClkSource
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[123]"></a>task_pri_change</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, k_task.o(i.task_pri_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = task_pri_change &rArr; mutex_pri_look
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_rm
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_reorder
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_pri_look
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add_tail
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add_head
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_release
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_lock
</UL>

<P><STRONG><a name="[13b]"></a>test_certificate</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, rhino_test_nano.o(i.test_certificate))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = test_certificate &rArr; krhino_task_create &rArr; task_create &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_create
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b7]"></a>test_task</STRONG> (Thumb, 316 bytes, Stack size 16 bytes, rhino_test_nano.o(i.test_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = test_task &rArr; cut_main &rArr; cut_mm_overview &rArr; cut_int2str &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_main
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_test_config
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_del
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rhino_test_nano.o(i.test_certificate)
</UL>
<P><STRONG><a name="[11a]"></a>tick_list_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, k_tick.o(i.tick_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init
</UL>

<P><STRONG><a name="[135]"></a>tick_list_insert</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, k_tick.o(i.tick_list_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tick_list_insert &rArr; tick_list_pri_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_pri_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_to_blk_obj
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
</UL>

<P><STRONG><a name="[132]"></a>tick_list_rm</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, k_tick.o(i.tick_list_rm))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tick_list_rm
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_rm
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_rm
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_update
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_del
</UL>

<P><STRONG><a name="[136]"></a>tick_list_update</STRONG> (Thumb, 272 bytes, Stack size 40 bytes, k_tick.o(i.tick_list_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = tick_list_update &rArr; mutex_task_pri_reset &rArr; mutex_release &rArr; task_pri_change &rArr; mutex_pri_look
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_rm
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_task_pri_reset
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_rm
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_tick_proc
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[d7]"></a>buf_queue_create</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, k_buf_queue.o(i.buf_queue_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = buf_queue_create &rArr; ringbuf_init
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_fix_buf_queue_create
</UL>

<P><STRONG><a name="[d5]"></a>addsize</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, k_mm.o(i.addsize))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = addsize &rArr; size_to_level
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;size_to_level
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_alloc
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_smallblk_alloc
</UL>

<P><STRONG><a name="[100]"></a>find_up_level</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, k_mm.o(i.find_up_level))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = find_up_level
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_ctz32
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_alloc
</UL>

<P><STRONG><a name="[111]"></a>init_mm_region</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, k_mm.o(i.init_mm_region))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = init_mm_region
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init_mm_head
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_add_mm_region
</UL>

<P><STRONG><a name="[105]"></a>k_mm_freelist_delete</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, k_mm.o(i.k_mm_freelist_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = k_mm_freelist_delete &rArr; size_to_level
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;size_to_level
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_free
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_alloc
</UL>

<P><STRONG><a name="[106]"></a>k_mm_freelist_insert</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, k_mm.o(i.k_mm_freelist_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = k_mm_freelist_insert &rArr; size_to_level
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;size_to_level
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_free
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_alloc
</UL>

<P><STRONG><a name="[104]"></a>k_mm_smallblk_alloc</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, k_mm.o(i.k_mm_smallblk_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = k_mm_smallblk_alloc &rArr; addsize &rArr; size_to_level
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mblk_alloc
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addsize
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_alloc
</UL>

<P><STRONG><a name="[108]"></a>k_mm_smallblk_free</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, k_mm.o(i.k_mm_smallblk_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = k_mm_smallblk_free &rArr; krhino_mblk_free
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mblk_free
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removesize
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_free
</UL>

<P><STRONG><a name="[14f]"></a>krhino_clz32</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, k_mm.o(i.krhino_clz32))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;size_to_level
</UL>

<P><STRONG><a name="[101]"></a>krhino_ctz32</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, k_mm.o(i.krhino_ctz32))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_up_level
</UL>

<P><STRONG><a name="[109]"></a>removesize</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, k_mm.o(i.removesize))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init_mm_head
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_free
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_smallblk_free
</UL>

<P><STRONG><a name="[d6]"></a>size_to_level</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, k_mm.o(i.size_to_level))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = size_to_level
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_clz32
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_alloc
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_freelist_insert
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_freelist_delete
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addsize
</UL>

<P><STRONG><a name="[122]"></a>is_klist_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, k_mutex.o(i.is_klist_empty))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_pri_look
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_unlock
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_del
</UL>

<P><STRONG><a name="[120]"></a>mutex_release</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, k_mutex.o(i.mutex_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mutex_release &rArr; task_pri_change &rArr; mutex_pri_look
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_pri_change
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_pri_look
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_task_pri_reset
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_unlock
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_del
</UL>

<P><STRONG><a name="[141]"></a>klist_insert</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, k_pend.o(i.klist_insert))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_add
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_to_blk_obj
</UL>

<P><STRONG><a name="[143]"></a>klist_rm</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, k_pend.o(i.klist_rm))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_reorder
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_rm
</UL>

<P><STRONG><a name="[140]"></a>pend_list_add</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, k_pend.o(i.pend_list_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pend_list_add
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_reorder
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_to_blk_obj
</UL>

<P><STRONG><a name="[127]"></a>is_klist_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, k_queue.o(i.is_klist_empty))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_queue_del
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_send
</UL>

<P><STRONG><a name="[125]"></a>msg_send</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, k_queue.o(i.msg_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = msg_send &rArr; task_msg_recv &rArr; pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_msg_recv
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_klist_empty
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_push
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_queue_back_send
</UL>

<P><STRONG><a name="[126]"></a>queue_create</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, k_queue.o(i.queue_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + Unknown Stack Size
<LI>Call Chain = queue_create &rArr; ringbuf_init
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_queue_create
</UL>

<P><STRONG><a name="[13d]"></a>task_msg_recv</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, k_queue.o(i.task_msg_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = task_msg_recv &rArr; pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_send
</UL>

<P><STRONG><a name="[14e]"></a>ringbuf_headlen_compress</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, k_ringbuf.o(i.ringbuf_headlen_compress))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ringbuf_headlen_compress
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_push
</UL>

<P><STRONG><a name="[14b]"></a>ringbuf_headlen_decompress</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, k_ringbuf.o(i.ringbuf_headlen_decompress))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ringbuf_headlen_decompress &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_pop
</UL>

<P><STRONG><a name="[147]"></a>is_ready_list_empty</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, k_sched.o(i.is_ready_list_empty))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add_tail
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add_head
</UL>

<P><STRONG><a name="[149]"></a>klist_insert</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, k_sched.o(i.klist_insert))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add_tail
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add_head
</UL>

<P><STRONG><a name="[14a]"></a>krhino_find_first_bit</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, k_sched.o(i.krhino_find_first_bit))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_rm
</UL>

<P><STRONG><a name="[148]"></a>ready_list_init</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, k_sched.o(i.ready_list_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ready_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add_tail
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add_head
</UL>

<P><STRONG><a name="[12a]"></a>is_klist_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, k_sem.o(i.is_klist_empty))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_del
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_give
</UL>

<P><STRONG><a name="[129]"></a>sem_create</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, k_sem.o(i.sem_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = sem_create
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_create
</UL>

<P><STRONG><a name="[12b]"></a>sem_give</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, k_sem.o(i.sem_give))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = sem_give &rArr; pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_klist_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_give
</UL>

<P><STRONG><a name="[110]"></a>klist_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, k_stats.o(i.klist_init))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kobj_list_init
</UL>

<P><STRONG><a name="[133]"></a>klist_rm</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, k_task.o(i.klist_rm))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_del
</UL>

<P><STRONG><a name="[12f]"></a>task_create</STRONG> (Thumb, 358 bytes, Stack size 64 bytes, k_task.o(i.task_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = task_create &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_task_stack_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add_tail
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_create
</UL>

<P><STRONG><a name="[130]"></a>task_mutex_free</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, k_task.o(i.task_mutex_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = task_mutex_free &rArr; pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_del
</UL>

<P><STRONG><a name="[166]"></a>klist_rm</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, k_tick.o(i.klist_rm))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_rm
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_update
</UL>

<P><STRONG><a name="[165]"></a>tick_list_pri_insert</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, k_tick.o(i.tick_list_pri_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tick_list_pri_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_insert
</UL>

<P><STRONG><a name="[db]"></a>cmd_proc</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, k_timer.o(i.cmd_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cmd_proc &rArr; timer_list_pri_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_rm
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_pri_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cmd_proc
</UL>

<P><STRONG><a name="[137]"></a>klist_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, k_timer.o(i.klist_init))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ktimer_init
</UL>

<P><STRONG><a name="[167]"></a>timer_cb_proc</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, k_timer.o(i.timer_cb_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = timer_cb_proc &rArr; timer_list_pri_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_rm
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_pri_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_task
</UL>

<P><STRONG><a name="[168]"></a>timer_cmd_proc</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, k_timer.o(i.timer_cmd_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = timer_cmd_proc &rArr; cmd_proc &rArr; timer_list_pri_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_proc
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_task
</UL>

<P><STRONG><a name="[dc]"></a>timer_list_pri_insert</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, k_timer.o(i.timer_list_pri_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = timer_list_pri_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb_proc
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_proc
</UL>

<P><STRONG><a name="[dd]"></a>timer_list_rm</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, k_timer.o(i.timer_list_rm))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb_proc
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_proc
</UL>

<P><STRONG><a name="[b6]"></a>timer_task</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, k_timer.o(i.timer_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = timer_task &rArr; krhino_buf_queue_recv &rArr; pend_to_blk_obj &rArr; tick_list_insert &rArr; tick_list_pri_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_recv
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cmd_proc
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb_proc
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sys_tick_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> k_timer.o(i.ktimer_init)
</UL>
<P><STRONG><a name="[150]"></a>soc_print_stack</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, soc_impl.o(i.soc_print_stack))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = soc_print_stack &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_get_cur_sp
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_cur_task_get
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_err_proc
</UL>

<P><STRONG><a name="[1]"></a>cut_test_task_aos_1_006_run</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, rhino_test_nano.o(i.cut_test_task_aos_1_006_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = cut_test_task_aos_1_006_run &rArr; krhino_task_create &rArr; task_create &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_del
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_create
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rhino_test_nano.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>cut_test_task_aos_1_007_run</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rhino_test_nano.o(i.cut_test_task_aos_1_007_run))
<BR>[Address Reference Count : 1]<UL><LI> rhino_test_nano.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>cut_test_task_aos_1_008_run</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rhino_test_nano.o(i.cut_test_task_aos_1_008_run))
<BR>[Address Reference Count : 1]<UL><LI> rhino_test_nano.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>cut_test_task_aos_1_009_run</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rhino_test_nano.o(i.cut_test_task_aos_1_009_run))
<BR>[Address Reference Count : 1]<UL><LI> rhino_test_nano.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>cut_test_task_aos_1_010_run</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rhino_test_nano.o(i.cut_test_task_aos_1_010_run))
<BR>[Address Reference Count : 1]<UL><LI> rhino_test_nano.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>cut_test_task_aos_1_011_run</STRONG> (Thumb, 400 bytes, Stack size 56 bytes, rhino_test_nano.o(i.cut_test_task_aos_1_011_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = cut_test_task_aos_1_011_run &rArr; krhino_task_create &rArr; task_create &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_del
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_create
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rhino_test_nano.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>cut_test_task_aos_1_012_run</STRONG> (Thumb, 216 bytes, Stack size 56 bytes, rhino_test_nano.o(i.cut_test_task_aos_1_012_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = cut_test_task_aos_1_012_run &rArr; krhino_task_create &rArr; task_create &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_del
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_create
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rhino_test_nano.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>cut_test_task_comm_aos_1_013_run</STRONG> (Thumb, 294 bytes, Stack size 24 bytes, rhino_test_nano.o(i.cut_test_task_comm_aos_1_013_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = cut_test_task_comm_aos_1_013_run &rArr; krhino_mutex_lock &rArr; pend_to_blk_obj &rArr; tick_list_insert &rArr; tick_list_pri_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_unlock
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_lock
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_del
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_create
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rhino_test_nano.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>cut_test_task_comm_aos_1_014_run</STRONG> (Thumb, 494 bytes, Stack size 64 bytes, rhino_test_nano.o(i.cut_test_task_comm_aos_1_014_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = cut_test_task_comm_aos_1_014_run &rArr; krhino_task_create &rArr; task_create &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_del
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_create
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_del
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_create
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rhino_test_nano.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>cut_test_task_comm_aos_1_015_run</STRONG> (Thumb, 288 bytes, Stack size 24 bytes, rhino_test_nano.o(i.cut_test_task_comm_aos_1_015_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = cut_test_task_comm_aos_1_015_run &rArr; krhino_sem_take &rArr; pend_to_blk_obj &rArr; tick_list_insert &rArr; tick_list_pri_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_take
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_give
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_del
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_create
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rhino_test_nano.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>cut_test_task_comm_aos_1_016_run</STRONG> (Thumb, 504 bytes, Stack size 64 bytes, rhino_test_nano.o(i.cut_test_task_comm_aos_1_016_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = cut_test_task_comm_aos_1_016_run &rArr; krhino_task_create &rArr; task_create &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_del
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_create
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_del
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_create
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rhino_test_nano.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>cut_test_task_comm_aos_1_017_run</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, rhino_test_nano.o(i.cut_test_task_comm_aos_1_017_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = cut_test_task_comm_aos_1_017_run &rArr; krhino_queue_recv &rArr; pend_to_blk_obj &rArr; tick_list_insert &rArr; tick_list_pri_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_queue_recv
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_queue_del
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_queue_create
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rhino_test_nano.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>cut_test_task_comm_aos_1_018_run</STRONG> (Thumb, 612 bytes, Stack size 48 bytes, rhino_test_nano.o(i.cut_test_task_comm_aos_1_018_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = cut_test_task_comm_aos_1_018_run &rArr; krhino_task_create &rArr; task_create &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_queue_recv
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_queue_del
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_queue_create
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_queue_back_send
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_del
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_create
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rhino_test_nano.o(.data)
</UL>
<P><STRONG><a name="[fd]"></a>dump_test_config</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, rhino_test_nano.o(i.dump_test_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dump_test_config &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_task
</UL>

<P><STRONG><a name="[ae]"></a>task0</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rhino_test_nano.o(i.task0))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = task0 &rArr; krhino_task_sleep &rArr; tick_list_insert &rArr; tick_list_pri_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
</UL>
<BR>[Address Reference Count : 3]<UL><LI> rhino_test_nano.o(i.cut_test_task_aos_1_012_run)
<LI> rhino_test_nano.o(i.cut_test_task_aos_1_006_run)
<LI> rhino_test_nano.o(i.cut_test_task_aos_1_011_run)
</UL>
<P><STRONG><a name="[af]"></a>task1</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rhino_test_nano.o(i.task1))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = task1 &rArr; krhino_mutex_lock &rArr; pend_to_blk_obj &rArr; tick_list_insert &rArr; tick_list_pri_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_unlock
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_lock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rhino_test_nano.o(i.cut_test_task_comm_aos_1_014_run)
</UL>
<P><STRONG><a name="[b0]"></a>task2</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rhino_test_nano.o(i.task2))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = task2 &rArr; krhino_mutex_lock &rArr; pend_to_blk_obj &rArr; tick_list_insert &rArr; tick_list_pri_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_unlock
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_lock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rhino_test_nano.o(i.cut_test_task_comm_aos_1_014_run)
</UL>
<P><STRONG><a name="[b1]"></a>task3</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rhino_test_nano.o(i.task3))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = task3 &rArr; krhino_sem_take &rArr; pend_to_blk_obj &rArr; tick_list_insert &rArr; tick_list_pri_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_take
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_give
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rhino_test_nano.o(i.cut_test_task_comm_aos_1_016_run)
</UL>
<P><STRONG><a name="[b2]"></a>task4</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rhino_test_nano.o(i.task4))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = task4 &rArr; krhino_sem_take &rArr; pend_to_blk_obj &rArr; tick_list_insert &rArr; tick_list_pri_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_take
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_give
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rhino_test_nano.o(i.cut_test_task_comm_aos_1_016_run)
</UL>
<P><STRONG><a name="[b3]"></a>task5</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, rhino_test_nano.o(i.task5))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = task5 &rArr; krhino_queue_back_send &rArr; msg_send &rArr; task_msg_recv &rArr; pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_queue_recv
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_queue_back_send
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rhino_test_nano.o(i.cut_test_task_comm_aos_1_018_run)
</UL>
<P><STRONG><a name="[b4]"></a>task6</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, rhino_test_nano.o(i.task6))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = task6 &rArr; krhino_queue_back_send &rArr; msg_send &rArr; task_msg_recv &rArr; pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_queue_recv
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_queue_back_send
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rhino_test_nano.o(i.cut_test_task_comm_aos_1_018_run)
</UL>
<P><STRONG><a name="[e7]"></a>cut_int2str</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, cut.o(i.cut_int2str))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cut_int2str &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_mm_overview
</UL>

<P><STRONG><a name="[ed]"></a>cut_result_report</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, cut.o(i.cut_result_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cut_result_report &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_main
</UL>

<P><STRONG><a name="[eb]"></a>filter</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, cut.o(i.filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = filter &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_main
</UL>

<P><STRONG><a name="[ea]"></a>parse_arg</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, cut.o(i.parse_arg))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = parse_arg &rArr; usage &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usage
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_main
</UL>

<P><STRONG><a name="[13f]"></a>usage</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cut.o(i.usage))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usage &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_arg
</UL>

<P><STRONG><a name="[cb]"></a>SetUartBaudrate</STRONG> (Thumb, 360 bytes, Stack size 64 bytes, hc32f46x_utility.o(i.SetUartBaudrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SetUartBaudrate &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_UartInit
</UL>

<P><STRONG><a name="[d1]"></a>_printf_core</STRONG> (Thumb, 996 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[d4]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[d3]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[ac]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf8.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0sprintf$8)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
